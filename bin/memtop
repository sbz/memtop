#!/usr/bin/env python

import fcntl
import os
import psutil
import struct
import sys
import termios


class PsUtilCompat(object):
    @classmethod
    def memory_percent(cls, process):
        if psutil.__version__.startswith('2'):
            return process.memory_percent()
        else:
            return process.memory_percent(memtype="rss")


class MemObject(object):
    def __init__(self):
        self.pid = None
        self.mem_usage = None
        self.cmdline = None

    def _linux_get_kernel_thread_name(self):
        cmd = "egrep 'Name|PPid' /proc/{0}/status".format(self.pid)
        with os.popen(cmd, 'r') as fd:
            data = fd.read()
        # assume pid of kthreadd is always 2
        kth_pids = [2, 0]
        name, ppid = data.split()[1::2]
        ppid = int(ppid)
        return "[{0}]".format(name) if ppid in kth_pids else "{0}".format(name)

    def get_kernel_thread_name(self):
        if 'linux' in sys.platform:
            return self._linux_get_kernel_thread_name()
        else:
            return self.cmdline


def get_width():
    width = 80
    with open(os.ctermid(), 'r') as term_fd:
        array = struct.pack('HHHH', 0, 0, 0, 0)
        packed = fcntl.ioctl(term_fd, termios.TIOCGWINSZ, array)
        height, width, _, _ = struct.unpack('HHHH', packed)

    return width

objs = []


def main():
    pids = psutil.pids()

    for p in pids:
        process = psutil.Process(pid=p)
        pid = process.pid
        # Only Resident Set Size (RSS)
        # https://en.wikipedia.org/wiki/Resident_set_size
        percent = '{0:2.1f}'.format(PsUtilCompat.memory_percent(process))
        cmdline_str = process.cmdline()[0] if len(process.cmdline()) == 1 \
            else ' '.join(process.cmdline())
        term_width = get_width()
        if len(cmdline_str) > int(.8*term_width):
            cmdline_str = cmdline_str[0:int(0.8*term_width)-3] + '...'
        mem_obj = MemObject()
        mem_obj.pid = pid
        mem_obj.mem_usage = float(percent)
        mem_obj.cmdline = cmdline_str
        if cmdline_str == '':
            mem_obj.cmdline = mem_obj.get_kernel_thread_name()
        objs.append(mem_obj)

    header = "Process (Pid) | Memory Used (%) | Command (cmdline)"
    print(header)
    print("-"*len(header))
    for m in sorted(objs, key=lambda x: x.mem_usage, reverse=True):
        print("{0:^14} {1:^16} {2}".format(m.pid, m.mem_usage, m.cmdline))

    return 0

if __name__ == '__main__':
    sys.exit(main())
